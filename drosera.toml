[trap]
# Path to your compiled arbitrage detector trap contract
path = "out/ArbitrageDetectorTrap.sol/ArbitrageDetectorTrap.json"

# Response contract configuration
# Replace with your deployed ArbitrageResponse contract address
response_contract = "0x0000000000000000000000000000000000000000"

# Function signature for arbitrage detection alerts
response_function = "arbitrageDetected(string,string,address,uint256,uint256)"

# Network configuration - Hoodi Testnet
[network]
rpc_url = "https://rpc.hoodi.ethpandaops.io"
chain_id = 560048

# Optional: Private key for deployment (or use DROSERA_PRIVATE_KEY env var)
# private_key = "0x..."

# Contract constructor parameters
[constructor_args]
# ArbitrageDetectorTrap has no constructor parameters
# All configuration is done via constants in the contract:
# - MIN_PRICE_GAP = 50 (0.5% minimum price difference)
# - MIN_LIQUIDITY = 1000e18 ($1000 minimum liquidity)  
# - MAX_GAS_COST = 50e18 ($50 maximum gas cost)
# - MAX_SLIPPAGE = 100 (1% maximum slippage)
# - MIN_PERSISTENCE_BLOCKS = 2 (must persist 2+ blocks)

# Example deployment steps:
# 1. Deploy ArbitrageResponse: forge create src/ArbitrageResponse.sol:ArbitrageResponse --rpc-url https://rpc.hoodi.ethpandaops.io --private-key $PRIVATE_KEY
# 2. Update response_contract above with deployed address
# 3. Deploy trap: DROSERA_PRIVATE_KEY=$PRIVATE_KEY drosera apply
# 4. Test: cast send $TRAP_ADDRESS "updateMockPrice(uint256,uint256)" 0 3200000000000000000000 --rpc-url https://rpc.hoodi.ethpandaops.io --private-key $PRIVATE_KEY
